[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Computing Supplement",
    "section": "",
    "text": "Preface\nThis is a computing supplement to the main website that uses python, and in particular scikit-learn for modeling. The structure is similar to the website, but the content here shows how to use this software for each topic.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/whole-game.html",
    "href": "chapters/whole-game.html",
    "title": "2  The Whole Game",
    "section": "",
    "text": "This chapter on the main website is a high-level tour of the modeling process. We’ll follow the same pattern here by analyzing the same data. But in Python!\nLet’s run some code to get started:\n\nimport sklearn\nimport pandas as pd\n\nLoad data\n\ndeliveries = pd.read_csv(\"data/deliveries.csv\", index_col=0)\ndeliveries.head()\n\n\n\n\n\n\n\n\n\n\ntime_to_delivery\nhour\nday\ndistance\nitem_01\nitem_02\nitem_03\nitem_04\nitem_05\nitem_06\n...\nitem_18\nitem_19\nitem_20\nitem_21\nitem_22\nitem_23\nitem_24\nitem_25\nitem_26\nitem_27\n\n\n\n\n1\n16.1106\n11.899\nThu\n3.15\n0\n0\n2\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n22.9466\n19.230\nTue\n3.69\n0\n0\n0\n0\n0\n0\n...\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n30.2882\n18.374\nFri\n2.06\n0\n0\n0\n0\n1\n0\n...\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n\n\n4\n33.4266\n15.836\nThu\n5.97\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n\n5\n27.2255\n19.619\nFri\n2.52\n0\n0\n0\n1\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n\n\n\n5 rows × 31 columns\n\n\n\npandas provides plotting utilities, wrapping matplotlib:\n\ndeliveries['time_to_delivery'].hist(bins=30);\n\n\n\n\nTODO: labels, decorations… rug plot maybe?\nData splitting. sklearn’s train_test_split doesn’t support stratifying on a continuous outcome. For now, just assume it’s fine without it.\n\nfrom sklearn.model_selection import train_test_split\ndelivery_train_val, delivery_test = train_test_split(deliveries, test_size=0.2, random_state=991)\ndelivery_train, delivery_val = train_test_split(delivery_train_val, test_size=0.2, random_state=991)\n\nMore plotting!\n\nfrom matplotlib import pyplot as plt\ndelivery_train.plot.scatter(\n  x='distance',\n  y='time_to_delivery',\n  alpha=0.1,\n)\nplt.show();\n\ndelivery_train['day'] = (\n  delivery_train['day']\n  .astype('category')\n  .cat.set_categories(\n    ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  )\n)\n\ndelivery_train.boxplot(\n  column='time_to_delivery',\n  by='day',\n);\n\n\n\n\n\n\n\nWeird automatic title on that box plot. I’m not sure how (whether?) to approach the geom_smooth from the ggplot2 version. TODO subplots.\nOh, do the sklearn html reprs work in quarto?\n\nfrom sklearn.compose import ColumnTransformer, make_column_selector\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\n\npipe = Pipeline([\n  ('preproc', ColumnTransformer([\n    ('num', StandardScaler(), make_column_selector(dtype_include='number')),\n    ('cat', OneHotEncoder(), make_column_selector(dtype_include=['object', 'category'])),\n  ])),\n  ('model', LogisticRegression()),\n])\n\npipe\n\nPipeline(steps=[('preproc',\n                 ColumnTransformer(transformers=[('num', StandardScaler(),\n                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817AC0&gt;),\n                                                 ('cat', OneHotEncoder(),\n                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817CA0&gt;)])),\n                ('model', LogisticRegression())])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PipelinePipeline(steps=[('preproc',\n                 ColumnTransformer(transformers=[('num', StandardScaler(),\n                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817AC0&gt;),\n                                                 ('cat', OneHotEncoder(),\n                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817CA0&gt;)])),\n                ('model', LogisticRegression())])preproc: ColumnTransformerColumnTransformer(transformers=[('num', StandardScaler(),\n                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817AC0&gt;),\n                                ('cat', OneHotEncoder(),\n                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817CA0&gt;)])num&lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817AC0&gt;StandardScalerStandardScaler()cat&lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817CA0&gt;OneHotEncoderOneHotEncoder()LogisticRegressionLogisticRegression()\n\n\nNice."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Python Computing Supplement",
    "section": "License",
    "text": "License\n\nThis work is licensed under CC BY-SA 4.0",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#intended-audience",
    "href": "index.html#intended-audience",
    "title": "Python Computing Supplement",
    "section": "Intended Audience",
    "text": "Intended Audience\nReaders should have used python before, but do not have to be experts. If you are new to python, we suggest taking a look at the Python Data Science Handbook.\nYou do not have to be a modeling expert either. We hope that you have used a linear or logistic regression before and understand basic statistical concepts such as correlation, variability, probabilities, etc.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#how-can-i-ask-questions",
    "href": "index.html#how-can-i-ask-questions",
    "title": "Python Computing Supplement",
    "section": "How can I ask questions?",
    "text": "How can I ask questions?\nIf you have questions about the content, it is probably best to ask on a public forum, like Stack Overflow for programmatic questions, or the data science or statistics Stack Exchange sites. You’ll most likely get a faster answer there if you take the time to ask the questions in the best way possible.\nIf you want a direct answer from us, you should follow what Max calls Yihui’s Rule: add an issue to GitHub (labeled as “Discussion”) first. It may take some time for us to get back to you.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#can-i-contribute",
    "href": "index.html#can-i-contribute",
    "title": "Python Computing Supplement",
    "section": "Can I contribute?",
    "text": "Can I contribute?\nThere is a contributing page with details on how to get up and running to compile the materials and suggestions on how to help.\nIf you just want to fix a typo, you can make a pull request to alter the appropriate .qmd file.\nPlease feel free to improve the quality of this content by submitting pull requests.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#computing-notes",
    "href": "index.html#computing-notes",
    "title": "Python Computing Supplement",
    "section": "Computing Notes",
    "text": "Computing Notes\nQuarto version 1.4.538 was used to compile and render the materials.\n\nPython version 3.11.7 was used for computations. For the list of python packages used and their versions, see the Pipfile in the source repository.",
    "crumbs": [
      "Preface"
    ]
  }
]