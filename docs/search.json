[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Computing Supplement",
    "section": "",
    "text": "oops"
  },
  {
    "objectID": "chapters/whole-game.html",
    "href": "chapters/whole-game.html",
    "title": "2  The Whole Game",
    "section": "",
    "text": "This chapter on the main website is a high-level tour of the modeling process. We’ll follow the same pattern here by analyzing the same data. But in Python!\nLet’s run some code to get started:\n\nimport sklearn\nimport pandas as pd\n\nLoad data\n\ndeliveries = pd.read_csv(\"data/deliveries.csv\", index_col=0)\ndeliveries.head()\n\n\n\n\n\n\n\n\n\n\ntime_to_delivery\nhour\nday\ndistance\nitem_01\nitem_02\nitem_03\nitem_04\nitem_05\nitem_06\n...\nitem_18\nitem_19\nitem_20\nitem_21\nitem_22\nitem_23\nitem_24\nitem_25\nitem_26\nitem_27\n\n\n\n\n1\n16.1106\n11.899\nThu\n3.15\n0\n0\n2\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n22.9466\n19.230\nTue\n3.69\n0\n0\n0\n0\n0\n0\n...\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n30.2882\n18.374\nFri\n2.06\n0\n0\n0\n0\n1\n0\n...\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n\n\n4\n33.4266\n15.836\nThu\n5.97\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n\n5\n27.2255\n19.619\nFri\n2.52\n0\n0\n0\n1\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n\n\n\n5 rows × 31 columns\n\n\n\npandas provides plotting utilities, wrapping matplotlib:\n\ndeliveries['time_to_delivery'].hist(bins=30);\n\n\n\n\nTODO: labels, decorations… rug plot maybe?\nData splitting. sklearn’s train_test_split doesn’t support stratifying on a continuous outcome. For now, just assume it’s fine without it.\n\nfrom sklearn.model_selection import train_test_split\ndelivery_train_val, delivery_test = train_test_split(deliveries, test_size=0.2, random_state=991)\ndelivery_train, delivery_val = train_test_split(delivery_train_val, test_size=0.2, random_state=991)\n\nMore plotting!\n\nfrom matplotlib import pyplot as plt\ndelivery_train.plot.scatter(\n  x='distance',\n  y='time_to_delivery',\n  alpha=0.1,\n)\nplt.show();\n\ndelivery_train['day'] = (\n  delivery_train['day']\n  .astype('category')\n  .cat.set_categories(\n    ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  )\n)\n\ndelivery_train.boxplot(\n  column='time_to_delivery',\n  by='day',\n);\n\n\n\n\n\n\n\nWeird automatic title on that box plot. I’m not sure how (whether?) to approach the geom_smooth from the ggplot2 version. TODO subplots.\nOh, do the sklearn html reprs work in quarto?\n\nfrom sklearn.compose import ColumnTransformer, make_column_selector\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\n\npipe = Pipeline([\n  ('preproc', ColumnTransformer([\n    ('num', StandardScaler(), make_column_selector(dtype_include='number')),\n    ('cat', OneHotEncoder(), make_column_selector(dtype_include=['object', 'category'])),\n  ])),\n  ('model', LogisticRegression()),\n])\n\npipe\n\nPipeline(steps=[('preproc',\n                 ColumnTransformer(transformers=[('num', StandardScaler(),\n                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817AC0&gt;),\n                                                 ('cat', OneHotEncoder(),\n                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817CA0&gt;)])),\n                ('model', LogisticRegression())])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PipelinePipeline(steps=[('preproc',\n                 ColumnTransformer(transformers=[('num', StandardScaler(),\n                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817AC0&gt;),\n                                                 ('cat', OneHotEncoder(),\n                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817CA0&gt;)])),\n                ('model', LogisticRegression())])preproc: ColumnTransformerColumnTransformer(transformers=[('num', StandardScaler(),\n                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817AC0&gt;),\n                                ('cat', OneHotEncoder(),\n                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817CA0&gt;)])num&lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817AC0&gt;StandardScalerStandardScaler()cat&lt;sklearn.compose._column_transformer.make_column_selector object at 0x0000013E90817CA0&gt;OneHotEncoderOneHotEncoder()LogisticRegressionLogisticRegression()\n\n\nNice."
  }
]